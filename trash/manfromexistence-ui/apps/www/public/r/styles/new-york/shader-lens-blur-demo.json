{
  "name": "shader-lens-blur-demo",
  "type": "registry:example",
  "registryDependencies": [
    "shader-lens-blur",
    "color-picker"
  ],
  "files": [
    {
      "path": "examples/shader-lens-blur-demo.tsx",
      "content": "\"use client\"\n\nimport React, { useCallback } from \"react\"\nimport { motion } from \"framer-motion\"\nimport { useAtom } from \"jotai\"\nimport { Circle, CircleOff, Sliders, Square, Triangle } from \"lucide-react\"\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\"\nimport ColorPicker from \"@/registry/new-york/ui/color-picker\"\nimport { Label } from \"@/registry/new-york/ui/label\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\"\nimport { Separator } from \"@/registry/new-york/ui/separator\"\nimport ShaderLensBlur, {\n  configAtom,\n} from \"@/registry/new-york/ui/shader-lens-blur\"\nimport { Slider } from \"@/registry/new-york/ui/slider\"\nimport { Switch } from \"@/registry/new-york/ui/switch\"\n\nfunction ShaderLensBlurDemo() {\n  return (\n    <div className=\"grid grid-cols-1  gap-8   \">\n      <ShaderLensBlur />\n      <ShaderBlurConfig />\n    </div>\n  )\n}\n\nfunction ShaderBlurConfig() {\n  const [config, setConfig] = useAtom(configAtom)\n\n  const handleVariationChange = useCallback(\n    (value: string) => {\n      setConfig((prev) => ({ ...prev, variation: parseInt(value) }))\n    },\n    [setConfig]\n  )\n\n  const handleColorChange = useCallback(\n    (key: \"color1\" | \"color2\" | \"color3\" | \"color4\", value: string) => {\n      setConfig((prev) => ({ ...prev, [key]: value }))\n    },\n    [setConfig]\n  )\n\n  const handleDimensionChange = useCallback(\n    (key: \"width\" | \"height\", value: number) => {\n      setConfig((prev) => ({ ...prev, [key]: value }))\n    },\n    [setConfig]\n  )\n\n  const variationIcons = [\n    { icon: Square, label: \"Square\" },\n    { icon: Circle, label: \"Solid Circle\" },\n    { icon: CircleOff, label: \"Hollow Circle\" },\n    { icon: Triangle, label: \"Triangle\" },\n  ]\n\n  return (\n    <Card className=\"bg-black text-white border-neutral-800 to-bg-primary/100 bg-gradient-to-b from-primary/90 dark:from-card/100 dark:to-card/90\">\n      <CardHeader className=\"border-b border-neutral-800\">\n        <CardTitle className=\"text-xl font-bold flex items-center\">\n          <Sliders className=\"w-5 h-5 mr-2\" />\n          Shader Configuration\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6 p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <Label\n                htmlFor=\"variation\"\n                className=\"text-sm font-medium text-neutral-400\"\n              >\n                Variation\n              </Label>\n              <Select\n                value={config.variation.toString()}\n                onValueChange={handleVariationChange}\n              >\n                <SelectTrigger\n                  id=\"variation\"\n                  className=\"w-full bg-neutral-900 border-neutral-700 text-white\"\n                >\n                  <SelectValue placeholder=\"Select variation\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-neutral-900 border-neutral-700 text-white\">\n                  {variationIcons.map((variation, index) => (\n                    <SelectItem\n                      key={index}\n                      value={index.toString()}\n                      className=\"hover:bg-neutral-800\"\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <variation.icon className=\"w-5 h-5\" />\n                        <span>- {variation.label}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Separator className=\"bg-neutral-800\" />\n\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-neutral-300\">Colors</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {([\"color1\", \"color2\", \"color3\", \"color4\"] as const).map(\n                  (color) => (\n                    <div key={color} className=\"space-y-2\">\n                      <Label\n                        htmlFor={color}\n                        className=\"text-sm font-medium text-neutral-400 block\"\n                      >\n                        {color}\n                      </Label>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <motion.button\n                            whileHover={{ scale: 1.05 }}\n                            whileTap={{ scale: 0.95 }}\n                            className=\"w-full h-10 rounded-md border-2 border-neutral-700 focus:border-blue-500 focus:outline-none\"\n                            style={{ backgroundColor: config[color] }}\n                          />\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-64 p-3 border-neutral-700\">\n                          <ColorPicker\n                            color={config[color]}\n                            onChange={(value) =>\n                              handleColorChange(color, value)\n                            }\n                          />\n                        </PopoverContent>\n                      </Popover>\n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-neutral-300\">\n                Options\n              </h3>\n              <div className=\"flex flex-col space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label\n                    htmlFor=\"enableHover\"\n                    className=\"text-sm font-medium text-neutral-400\"\n                  >\n                    Enable Hover\n                  </Label>\n                  <Switch\n                    id=\"enableHover\"\n                    checked={config.enableHover}\n                    onCheckedChange={(checked) =>\n                      setConfig((prev) => ({ ...prev, enableHover: checked }))\n                    }\n                    className=\"data-[state=checked]:bg-blue-500\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <Label\n                    htmlFor=\"invertMouse\"\n                    className=\"text-sm font-medium text-neutral-400\"\n                  >\n                    Invert Mouse\n                  </Label>\n                  <Switch\n                    id=\"invertMouse\"\n                    checked={config.invertMouse}\n                    onCheckedChange={(checked) =>\n                      setConfig((prev) => ({ ...prev, invertMouse: checked }))\n                    }\n                    className=\"data-[state=checked]:bg-blue-500\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <Separator className=\"bg-neutral-800\" />\n\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-neutral-300\">\n                Dimensions\n              </h3>\n              <div className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label\n                      htmlFor=\"width\"\n                      className=\"text-sm font-medium text-neutral-400\"\n                    >\n                      Width\n                    </Label>\n                    <span className=\"text-sm text-neutral-400\">\n                      {config.width}px\n                    </span>\n                  </div>\n                  <Slider\n                    id=\"width\"\n                    min={100}\n                    max={1000}\n                    step={10}\n                    value={[parseInt(config.width.toString())]}\n                    onValueChange={([value]) =>\n                      handleDimensionChange(\"width\", value)\n                    }\n                    className=\"[&_[role=slider]]:bg-blue-500\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label\n                      htmlFor=\"height\"\n                      className=\"text-sm font-medium text-neutral-400\"\n                    >\n                      Height\n                    </Label>\n                    <span className=\"text-sm text-neutral-400\">\n                      {config.height}px\n                    </span>\n                  </div>\n                  <Slider\n                    id=\"height\"\n                    min={100}\n                    max={1000}\n                    step={10}\n                    value={[parseInt(config.height.toString())]}\n                    onValueChange={([value]) =>\n                      handleDimensionChange(\"height\", value)\n                    }\n                    className=\"[&_[role=slider]]:bg-blue-500\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\nexport default ShaderLensBlurDemo\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}