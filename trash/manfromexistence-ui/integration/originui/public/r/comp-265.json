{
  "name": "comp-265",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/label.json",
    "https://originui.com/r/slider.json",
    "https://originui.com/r/input.json",
    "https://originui.com/r/button.json"
  ],
  "files": [
    {
      "path": "components/comp-265.tsx",
      "content": "\"use client\";\n\nimport { useSliderWithInput } from \"@/registry/default/hooks/use-slider-with-input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { Slider } from \"@/registry/default/ui/slider\";\nimport { useId } from \"react\";\n\nconst items = [\n  { id: 1, price: 80 },\n  { id: 2, price: 95 },\n  { id: 3, price: 110 },\n  { id: 4, price: 125 },\n  { id: 5, price: 130 },\n  { id: 6, price: 140 },\n  { id: 7, price: 145 },\n  { id: 8, price: 150 },\n  { id: 9, price: 155 },\n  { id: 10, price: 165 },\n  { id: 11, price: 175 },\n  { id: 12, price: 185 },\n  { id: 13, price: 195 },\n  { id: 14, price: 205 },\n  { id: 15, price: 215 },\n  { id: 16, price: 225 },\n  { id: 17, price: 235 },\n  { id: 18, price: 245 },\n  { id: 19, price: 255 },\n  { id: 20, price: 260 },\n  { id: 21, price: 265 },\n  { id: 22, price: 270 },\n  { id: 23, price: 275 },\n  { id: 24, price: 280 },\n  { id: 25, price: 285 },\n  { id: 26, price: 290 },\n  { id: 27, price: 290 },\n  { id: 28, price: 295 },\n  { id: 29, price: 295 },\n  { id: 30, price: 295 },\n  { id: 31, price: 298 },\n  { id: 32, price: 299 },\n  { id: 33, price: 300 },\n  { id: 34, price: 305 },\n  { id: 35, price: 310 },\n  { id: 36, price: 315 },\n  { id: 37, price: 320 },\n  { id: 38, price: 325 },\n  { id: 39, price: 330 },\n  { id: 40, price: 335 },\n  { id: 41, price: 340 },\n  { id: 42, price: 345 },\n  { id: 43, price: 350 },\n  { id: 44, price: 355 },\n  { id: 45, price: 360 },\n  { id: 46, price: 365 },\n  { id: 47, price: 365 },\n  { id: 48, price: 375 },\n  { id: 49, price: 380 },\n  { id: 50, price: 385 },\n  { id: 51, price: 390 },\n  { id: 52, price: 395 },\n  { id: 53, price: 400 },\n  { id: 54, price: 405 },\n  { id: 55, price: 410 },\n  { id: 56, price: 415 },\n  { id: 57, price: 420 },\n  { id: 58, price: 425 },\n  { id: 59, price: 430 },\n  { id: 60, price: 435 },\n  { id: 61, price: 440 },\n  { id: 62, price: 445 },\n  { id: 63, price: 450 },\n  { id: 64, price: 455 },\n  { id: 65, price: 460 },\n  { id: 66, price: 465 },\n  { id: 67, price: 470 },\n  { id: 68, price: 475 },\n  { id: 69, price: 480 },\n  { id: 70, price: 485 },\n  { id: 71, price: 490 },\n  { id: 72, price: 495 },\n  { id: 73, price: 495 },\n  { id: 74, price: 498 },\n  { id: 75, price: 499 },\n  { id: 76, price: 500 },\n  { id: 77, price: 500 },\n  { id: 78, price: 500 },\n  { id: 79, price: 515 },\n  { id: 80, price: 530 },\n  { id: 81, price: 545 },\n  { id: 82, price: 560 },\n  { id: 83, price: 575 },\n  { id: 84, price: 590 },\n  { id: 85, price: 605 },\n  { id: 86, price: 620 },\n  { id: 87, price: 635 },\n  { id: 88, price: 650 },\n  { id: 89, price: 655 },\n  { id: 90, price: 660 },\n  { id: 91, price: 665 },\n  { id: 92, price: 670 },\n  { id: 93, price: 675 },\n  { id: 94, price: 680 },\n  { id: 95, price: 685 },\n  { id: 96, price: 690 },\n  { id: 97, price: 695 },\n  { id: 98, price: 700 },\n  { id: 99, price: 700 },\n  { id: 100, price: 700 },\n  { id: 101, price: 700 },\n  { id: 102, price: 700 },\n  { id: 103, price: 700 },\n  { id: 104, price: 725 },\n  { id: 105, price: 750 },\n  { id: 106, price: 775 },\n  { id: 107, price: 800 },\n  { id: 108, price: 815 },\n  { id: 109, price: 830 },\n  { id: 110, price: 845 },\n  { id: 111, price: 845 },\n  { id: 112, price: 845 },\n  { id: 113, price: 870 },\n  { id: 114, price: 875 },\n  { id: 115, price: 880 },\n  { id: 116, price: 885 },\n  { id: 117, price: 890 },\n  { id: 118, price: 895 },\n  { id: 119, price: 898 },\n  { id: 120, price: 900 },\n];\n\nexport default function Component() {\n  const id = useId();\n\n  // Define the number of ticks\n  const tick_count = 40;\n  // Find the min and max values across all items\n  const minValue = Math.min(...items.map((item) => item.price));\n  const maxValue = Math.max(...items.map((item) => item.price));\n\n  const {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n  } = useSliderWithInput({ minValue, maxValue, initialValue: [200, 780] }); // set initialValue: [minValue, maxValue] to show all items by default\n\n  // Calculate the price step based on the min and max prices\n  const priceStep = (maxValue - minValue) / tick_count;\n\n  // Calculate item counts for each price range\n  const itemCounts = Array(tick_count)\n    .fill(0)\n    .map((_, tick) => {\n      const rangeMin = minValue + tick * priceStep;\n      const rangeMax = minValue + (tick + 1) * priceStep;\n      return items.filter((item) => item.price >= rangeMin && item.price < rangeMax).length;\n    });\n\n  // Find maximum count for scaling\n  const maxCount = Math.max(...itemCounts);\n\n  const handleSliderValueChange = (values: number[]) => {\n    handleSliderChange(values);\n  };\n\n  // Function to count items in the selected range\n  const countItemsInRange = (min: number, max: number) => {\n    return items.filter((item) => item.price >= min && item.price <= max).length;\n  };\n\n  const isBarInSelectedRange = (\n    index: number,\n    minValue: number,\n    priceStep: number,\n    sliderValue: number[],\n  ) => {\n    const rangeMin = minValue + index * priceStep;\n    const rangeMax = minValue + (index + 1) * priceStep;\n    return (\n      countItemsInRange(sliderValue[0], sliderValue[1]) > 0 &&\n      rangeMin <= sliderValue[1] &&\n      rangeMax >= sliderValue[0]\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Label>Price slider</Label>\n      <div>\n        {/* Histogram bars */}\n        <div className=\"flex h-12 w-full items-end px-3\" aria-hidden=\"true\">\n          {itemCounts.map((count, i) => (\n            <div\n              key={i}\n              className=\"flex flex-1 justify-center\"\n              style={{\n                height: `${(count / maxCount) * 100}%`,\n              }}\n            >\n              <span\n                data-selected={isBarInSelectedRange(i, minValue, priceStep, sliderValue)}\n                className=\"h-full w-full bg-primary/20\"\n              ></span>\n            </div>\n          ))}\n        </div>\n        <Slider\n          value={sliderValue}\n          onValueChange={handleSliderValueChange}\n          min={minValue}\n          max={maxValue}\n          aria-label=\"Price range\"\n        />\n      </div>\n\n      {/* Inputs */}\n      <div className=\"flex items-center justify-between gap-4\">\n        <div className=\"space-y-1\">\n          <Label htmlFor={`${id}-min`}>Min price</Label>\n          <div className=\"relative\">\n            <Input\n              id={`${id}-min`}\n              className=\"peer w-full ps-6\"\n              type=\"text\"\n              inputMode=\"decimal\"\n              value={inputValues[0]}\n              onChange={(e) => handleInputChange(e, 0)}\n              onBlur={() => validateAndUpdateValue(inputValues[0], 0)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  validateAndUpdateValue(inputValues[0], 0);\n                }\n              }}\n              aria-label=\"Enter minimum price\"\n            />\n            <span className=\"pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 text-sm text-muted-foreground peer-disabled:opacity-50\">\n              $\n            </span>\n          </div>\n        </div>\n        <div className=\"space-y-1\">\n          <Label htmlFor={`${id}-max`}>Max price</Label>\n          <div className=\"relative\">\n            <Input\n              id={`${id}-max`}\n              className=\"peer w-full ps-6\"\n              type=\"text\"\n              inputMode=\"decimal\"\n              value={inputValues[1]}\n              onChange={(e) => handleInputChange(e, 1)}\n              onBlur={() => validateAndUpdateValue(inputValues[1], 1)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  validateAndUpdateValue(inputValues[1], 1);\n                }\n              }}\n              aria-label=\"Enter maximum price\"\n            />\n            <span className=\"pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 text-sm text-muted-foreground peer-disabled:opacity-50\">\n              $\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Button */}\n      <Button className=\"w-full\" variant=\"outline\">\n        Show {countItemsInRange(sliderValue[0], sliderValue[1])} items\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "hooks/use-slider-with-input.ts",
      "content": "import { useCallback, useState } from \"react\";\n\ntype UseSliderWithInputProps = {\n  minValue?: number;\n  maxValue?: number;\n  initialValue?: number[];\n  defaultValue?: number[];\n};\n\nexport function useSliderWithInput({\n  minValue = 0,\n  maxValue = 100,\n  initialValue = [minValue],\n  defaultValue = [minValue],\n}: UseSliderWithInputProps) {\n  const [sliderValue, setSliderValue] = useState(initialValue);\n  const [inputValues, setInputValues] = useState(initialValue.map((v) => v.toString()));\n\n  const validateAndUpdateValue = useCallback(\n    (rawValue: string, index: number) => {\n      if (rawValue === \"\" || rawValue === \"-\") {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = \"0\";\n        setInputValues(newInputValues);\n\n        const newSliderValues = [...sliderValue];\n        newSliderValues[index] = 0;\n        setSliderValue(newSliderValues);\n        return;\n      }\n\n      const numValue = parseFloat(rawValue);\n\n      if (isNaN(numValue)) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = sliderValue[index].toString();\n        setInputValues(newInputValues);\n        return;\n      }\n\n      let clampedValue = Math.min(maxValue, Math.max(minValue, numValue));\n\n      if (sliderValue.length > 1) {\n        if (index === 0) {\n          clampedValue = Math.min(clampedValue, sliderValue[1]);\n        } else {\n          clampedValue = Math.max(clampedValue, sliderValue[0]);\n        }\n      }\n\n      const newSliderValues = [...sliderValue];\n      newSliderValues[index] = clampedValue;\n      setSliderValue(newSliderValues);\n\n      const newInputValues = [...inputValues];\n      newInputValues[index] = clampedValue.toString();\n      setInputValues(newInputValues);\n    },\n    [sliderValue, inputValues, minValue, maxValue],\n  );\n\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\n      const newValue = e.target.value;\n      if (newValue === \"\" || /^-?\\d*\\.?\\d*$/.test(newValue)) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = newValue;\n        setInputValues(newInputValues);\n      }\n    },\n    [inputValues],\n  );\n\n  const handleSliderChange = useCallback((newValue: number[]) => {\n    setSliderValue(newValue);\n    setInputValues(newValue.map((v) => v.toString()));\n  }, []);\n\n  const resetToDefault = useCallback(() => {\n    setSliderValue(defaultValue);\n    setInputValues(defaultValue.map((v) => v.toString()));\n  }, [defaultValue]);\n\n  return {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ],
  "tags": []
}