{
  "name": "text",
  "type": "registry:ui",
  "registryDependencies": [
    "text"
  ],
  "files": [
    {
      "path": "ui/text.tsx",
      "content": "import React from \"react\"\nimport { wrap } from \"@motionone/utils\"\nimport { HeartFilledIcon } from \"@radix-ui/react-icons\"\nimport {\n  AnimatePresence,\n  motion,\n  useAnimationFrame,\n  useMotionValue,\n  useScroll,\n  useSpring,\n  useTransform,\n  useVelocity,\n} from \"framer-motion\"\n\ninterface ParallaxProps {\n  children: string\n  baseVelocity: number\n}\n\nexport function FadeDownStagger({ key }: { key: number }) {\n  const FADE_DOWN_ANIMATION_VARIANTS = {\n    hidden: { opacity: 0, y: -10 },\n    show: { opacity: 1, y: 0, transition: { type: \"spring\" } },\n  }\n  return (\n    <motion.div\n      key={key}\n      initial=\"hidden\"\n      animate=\"show\"\n      viewport={{ once: true }}\n      variants={{\n        hidden: {},\n        show: {\n          transition: {\n            staggerChildren: 0.15,\n          },\n        },\n      }}\n    >\n      <motion.h1\n        className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n        variants={FADE_DOWN_ANIMATION_VARIANTS}\n      >\n        Fade Down\n      </motion.h1>\n      <motion.p\n        className=\"mt-6 text-center md:text-lg\"\n        variants={FADE_DOWN_ANIMATION_VARIANTS}\n      >\n        Animation Preview\n      </motion.p>\n      <motion.div\n        className=\"mx-auto mt-6 flex items-center justify-center space-x-5\"\n        variants={FADE_DOWN_ANIMATION_VARIANTS}\n      >\n        If you&apos;re seeing this, thank you for trying my project out! -\n        manfromexistnece\n      </motion.div>\n    </motion.div>\n  )\n}\n\nexport function FadeUpStagger({ key }: { key: number }) {\n  const FADE_UP_ANIMATION_VARIANTS = {\n    hidden: { opacity: 0, y: 10 },\n    show: { opacity: 1, y: 0, transition: { type: \"spring\" } },\n  }\n  return (\n    <motion.div\n      key={key}\n      initial=\"hidden\"\n      animate=\"show\"\n      viewport={{ once: true }}\n      variants={{\n        hidden: {},\n        show: {\n          transition: {\n            staggerChildren: 0.15,\n          },\n        },\n      }}\n    >\n      <motion.h1\n        className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n        variants={FADE_UP_ANIMATION_VARIANTS}\n      >\n        Fade Up\n      </motion.h1>\n      <motion.p\n        className=\"mt-6 text-center md:text-lg\"\n        variants={FADE_UP_ANIMATION_VARIANTS}\n      >\n        Animation Preview\n      </motion.p>\n      <motion.div\n        className=\"mx-auto mt-6 flex items-center justify-center space-x-5\"\n        variants={FADE_UP_ANIMATION_VARIANTS}\n      >\n        <HeartFilledIcon />\n      </motion.div>\n    </motion.div>\n  )\n}\n\nexport function MultiDirectionSlide({ key }: { key: number }) {\n  const MULTIDIRECTION_SLIDE_VARIANTS = {\n    hidden: { opacity: 0, x: \"-25vw\" },\n    visible: { opacity: 1, x: 0 },\n    right: { opacity: 0, x: \"25vw\" },\n  }\n  return (\n    <div className=\"overflow-hidden\" key={key}>\n      <motion.h1\n        initial=\"hidden\"\n        animate=\"visible\"\n        variants={MULTIDIRECTION_SLIDE_VARIANTS}\n        transition={{ duration: 1 }}\n        className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n      >\n        Multi Direction\n      </motion.h1>\n\n      <motion.h1\n        initial=\"right\"\n        animate=\"visible\"\n        variants={MULTIDIRECTION_SLIDE_VARIANTS}\n        transition={{ duration: 1 }}\n        className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n      >\n        Slide\n      </motion.h1>\n    </div>\n  )\n}\n\nexport function StaggeredFadeIn() {\n  const sentence = \"Staggered Fade In\"\n  const words = sentence.split(\" \")\n\n  const wordVariants = {\n    hidden: { opacity: 0 },\n    visible: (i: any) => ({ y: 0, opacity: 1, transition: { delay: i * 0.1 } }),\n  }\n  return (\n    <motion.h1\n      initial=\"hidden\"\n      animate=\"visible\"\n      className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n    >\n      {words.map((word, i) => (\n        <motion.span key={word} variants={wordVariants} custom={i}>\n          {word}{\" \"}\n        </motion.span>\n      ))}\n    </motion.h1>\n  )\n}\n\nexport function LetterPullUp() {\n  const words = \"Letter Pull Up\"\n  const letters = words.split(\"\")\n\n  const pullupVariant = {\n    initial: { y: 100, opacity: 0 },\n    animate: (i: any) => ({\n      y: 0,\n      opacity: 1,\n      transition: {\n        delay: i * 0.05, // Delay each letter's animation by 0.05 seconds\n      },\n    }),\n  }\n\n  return (\n    <div className=\"flex justify-center\">\n      {letters.map((letter, i) => (\n        <motion.h1\n          key={i}\n          variants={pullupVariant}\n          initial=\"initial\"\n          animate=\"animate\"\n          custom={i}\n          className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n        >\n          {letter === \" \" ? <span>&nbsp;</span> : letter}\n        </motion.h1>\n      ))}\n    </div>\n  )\n}\n\nexport function WordPullUp() {\n  const container = {\n    hidden: { opacity: 0 },\n    show: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n      },\n    },\n  }\n\n  const item = {\n    hidden: { y: 20, opacity: 0 },\n    show: { y: 0, opacity: 1 },\n  }\n\n  const words = \"Word Pull Up\"\n  return (\n    <motion.h1\n      variants={container}\n      initial=\"hidden\"\n      animate=\"show\"\n      className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n    >\n      {words.split(\" \").map((word, i) => (\n        <motion.span\n          key={i}\n          variants={item}\n          style={{ display: \"inline-block\", paddingRight: \"15px\" }}\n        >\n          {word === \"\" ? <span>&nbsp;</span> : word}\n        </motion.span>\n      ))}\n    </motion.h1>\n  )\n}\n\nexport function VelocityScroll() {\n  function ParallaxText({ children, baseVelocity = 100 }: ParallaxProps) {\n    const baseX = useMotionValue(0)\n    const { scrollY } = useScroll()\n    const scrollVelocity = useVelocity(scrollY)\n    const smoothVelocity = useSpring(scrollVelocity, {\n      damping: 50,\n      stiffness: 400,\n    })\n    const velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 5], {\n      clamp: false,\n    })\n\n    /**\n     * This is a magic wrapping for the length of the text - you\n     * have to replace for wrapping that works for you or dynamically\n     * calculate\n     */\n    const x = useTransform(baseX, (v) => `${wrap(-20, -45, v)}%`)\n\n    const directionFactor = React.useRef<number>(1)\n    useAnimationFrame((t, delta) => {\n      let moveBy = directionFactor.current * baseVelocity * (delta / 1000)\n\n      /**\n       * This is what changes the direction of the scroll once we\n       * switch scrolling directions.\n       */\n      if (velocityFactor.get() < 0) {\n        directionFactor.current = -1\n      } else if (velocityFactor.get() > 0) {\n        directionFactor.current = 1\n      }\n\n      moveBy += directionFactor.current * moveBy * velocityFactor.get()\n\n      baseX.set(baseX.get() + moveBy)\n    })\n\n    /**\n     * The number of times to repeat the child text should be dynamically calculated\n     * based on the size of the text and viewport. Likewise, the x motion value is\n     * currently wrapped between -20 and -45% - this 25% is derived from the fact\n     * we have four children (100% / 4). This would also want deriving from the\n     * dynamically generated number of children.\n     */\n    return (\n      <div className=\"parallax\">\n        <motion.div\n          className=\"scroller font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n          style={{ x }}\n        >\n          <span>{children} </span>\n          <span>{children} </span>\n        </motion.div>\n      </div>\n    )\n  }\n  return (\n    <section>\n      <ParallaxText baseVelocity={5}>Parallax</ParallaxText>\n      <ParallaxText baseVelocity={-5}>Text</ParallaxText>\n    </section>\n  )\n}\n\nexport function RotateText() {\n  const words = [\"ROTATE\", \"BETWEEN\", \"TEXT\"]\n  const [index, setIndex] = React.useState(0)\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setIndex((prevIndex) => (prevIndex + 1) % words.length)\n    }, 3000)\n\n    // Clean up interval on unmount\n    return () => clearInterval(interval)\n  }, [words.length])\n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.h1\n        key={words[index]}\n        initial={{ opacity: 0, y: -50 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 50 }}\n        transition={{ duration: 0.5 }}\n        className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n      >\n        {words[index]}\n      </motion.h1>\n    </AnimatePresence>\n  )\n}\n\nexport function TypingEffect() {\n  const text = \"Typing Effect\"\n  const [displayedText, setDisplayedText] = React.useState(\"\")\n  const [i, setI] = React.useState(0)\n\n  React.useEffect(() => {\n    const typingEffect = setInterval(() => {\n      if (i < text.length) {\n        setDisplayedText((prevState) => prevState + text.charAt(i))\n        setI(i + 1)\n      } else {\n        clearInterval(typingEffect)\n      }\n    }, 200)\n\n    return () => {\n      clearInterval(typingEffect)\n    }\n  }, [i])\n\n  return (\n    <h1 className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\">\n      {displayedText ? displayedText : \"Typing Effect\"}\n    </h1>\n  )\n}\n\nexport function SeparateAway() {\n  const variants1 = {\n    hidden: { opacity: 0, y: 0 },\n    visible: (custom: number) => ({\n      opacity: 1,\n      y: custom * 5,\n      transition: { duration: 1.5 },\n    }),\n  }\n  return (\n    <div>\n      <motion.h1\n        custom={-1}\n        variants={variants1}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n      >\n        Separate\n      </motion.h1>\n      <motion.h1\n        custom={1}\n        variants={variants1}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n      >\n        Away\n      </motion.h1>\n    </div>\n  )\n}\n\nexport function GradualSpacing() {\n  const text = \"Gradual Spacing\"\n  const gradual = {\n    hidden: { opacity: 0, x: -20 },\n    visible: { opacity: 1, x: 0 },\n  }\n  return (\n    <div className=\"flex justify-center space-x-1\">\n      <AnimatePresence>\n        {text.split(\"\").map((char, i) => (\n          <motion.h1\n            key={i}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            variants={gradual}\n            transition={{ duration: 0.5, delay: i * 0.1 }}\n            className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n          >\n            {char === \" \" ? <span>&nbsp;</span> : char}\n          </motion.h1>\n        ))}\n      </AnimatePresence>\n    </div>\n  )\n}\n\nexport function BlurIn() {\n  const variants1 = {\n    hidden: { filter: \"blur(10px)\", opacity: 0 },\n    visible: { filter: \"blur(0px)\", opacity: 1 },\n  }\n  return (\n    <motion.h1\n      initial=\"hidden\"\n      animate=\"visible\"\n      transition={{ duration: 1 }}\n      variants={variants1}\n      className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n    >\n      Blur In\n    </motion.h1>\n  )\n}\n\nexport function SlightFlip() {\n  const word = \"Slight Flip Text\"\n  const variants1 = {\n    hidden: { rotateX: -90, opacity: 0 },\n    visible: { rotateX: 0, opacity: 1 },\n  }\n  return (\n    <div className=\"flex justify-center space-x-2\">\n      <AnimatePresence>\n        {word.split(\"\").map((char, i) => (\n          <motion.span\n            key={i}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            variants={variants1}\n            transition={{ duration: 0.5, delay: i * 0.2 }}\n            className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n            style={{ transformOrigin: \"50% 50%\" }}\n          >\n            {char}\n          </motion.span>\n        ))}\n      </AnimatePresence>\n    </div>\n  )\n}\n\nexport function WavyText() {\n  const word = \"Wavy Text\"\n  const variants1 = {\n    hidden: { y: 10 },\n    visible: { y: -10 },\n  }\n  return (\n    <div className=\"flex justify-center space-x-2\">\n      <AnimatePresence>\n        {word.split(\"\").map((char, i) => (\n          <motion.h1\n            key={i}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            variants={variants1}\n            transition={{ yoyo: Infinity, duration: 0.5, delay: i * 0.2 }}\n            className=\"font-display text-center text-lg font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\"\n          >\n            {char}\n          </motion.h1>\n        ))}\n      </AnimatePresence>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}