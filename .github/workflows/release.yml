name: Build dx CLI

on:
  push:
    branches:
      - main

jobs:
  build-release:
    name: Build for ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: windows-arm64
            os: windows-latest
            target: aarch64-pc-windows-msvc
          - name: linux-x64-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: linux-x64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - name: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup target add ${{ matrix.target }}

      - name: Install musl-tools for musl target
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Prepare artifact for upload
        shell: bash
        run: |
          # Create a directory to store the artifact
          mkdir -p dist
          # The binary name is set to "dx"
          BINARY_NAME="dx"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Add .exe for Windows and copy to dist folder
            cp "target/${{ matrix.target }}/release/${BINARY_NAME}.exe" "dist/"
          else
            # Copy the binary for Linux/macOS to dist folder
            cp "target/${{ matrix.target }}/release/${BINARY_NAME}" "dist/"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/*