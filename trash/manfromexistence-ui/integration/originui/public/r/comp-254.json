{
  "name": "comp-254",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/button.json",
    "https://originui.com/r/input.json",
    "https://originui.com/r/label.json",
    "https://originui.com/r/slider.json",
    "https://originui.com/r/tooltip.json"
  ],
  "files": [
    {
      "path": "components/comp-254.tsx",
      "content": "\"use client\";\n\nimport { useSliderWithInput } from \"@/registry/default/hooks/use-slider-with-input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { Slider } from \"@/registry/default/ui/slider\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/default/ui/tooltip\";\nimport { RotateCcw } from \"lucide-react\";\n\nexport default function Component() {\n  const minValue = 0.0;\n  const maxValue = 2;\n  const initialValue = [1.25];\n  const defaultValue = [1];\n\n  const {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n  } = useSliderWithInput({ minValue, maxValue, initialValue, defaultValue });\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-between gap-2\">\n        <Label>Temperature</Label>\n        <div className=\"flex items-center gap-1\">\n          <TooltipProvider delayDuration={0}>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"size-7\"\n                  aria-label=\"Reset\"\n                  onClick={resetToDefault}\n                >\n                  <RotateCcw size={16} strokeWidth={2} aria-hidden=\"true\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent className=\"px-2 py-1 text-xs\">Reset to default</TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n          <Input\n            className=\"h-7 w-12 px-2 py-0\"\n            type=\"text\"\n            inputMode=\"decimal\"\n            value={inputValues[0]}\n            onChange={(e) => handleInputChange(e, 0)}\n            onBlur={() => validateAndUpdateValue(inputValues[0], 0)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                validateAndUpdateValue(inputValues[0], 0);\n              }\n            }}\n            aria-label=\"Enter value\"\n          />\n        </div>\n      </div>\n      <div className=\"flex items-center gap-4\">\n        <Slider\n          className=\"grow\"\n          value={sliderValue}\n          onValueChange={handleSliderChange}\n          min={minValue}\n          max={maxValue}\n          step={0.01}\n          aria-label=\"Temperature\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "hooks/use-slider-with-input.ts",
      "content": "import { useCallback, useState } from \"react\";\n\ntype UseSliderWithInputProps = {\n  minValue?: number;\n  maxValue?: number;\n  initialValue?: number[];\n  defaultValue?: number[];\n};\n\nexport function useSliderWithInput({\n  minValue = 0,\n  maxValue = 100,\n  initialValue = [minValue],\n  defaultValue = [minValue],\n}: UseSliderWithInputProps) {\n  const [sliderValue, setSliderValue] = useState(initialValue);\n  const [inputValues, setInputValues] = useState(initialValue.map((v) => v.toString()));\n\n  const validateAndUpdateValue = useCallback(\n    (rawValue: string, index: number) => {\n      if (rawValue === \"\" || rawValue === \"-\") {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = \"0\";\n        setInputValues(newInputValues);\n\n        const newSliderValues = [...sliderValue];\n        newSliderValues[index] = 0;\n        setSliderValue(newSliderValues);\n        return;\n      }\n\n      const numValue = parseFloat(rawValue);\n\n      if (isNaN(numValue)) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = sliderValue[index].toString();\n        setInputValues(newInputValues);\n        return;\n      }\n\n      let clampedValue = Math.min(maxValue, Math.max(minValue, numValue));\n\n      if (sliderValue.length > 1) {\n        if (index === 0) {\n          clampedValue = Math.min(clampedValue, sliderValue[1]);\n        } else {\n          clampedValue = Math.max(clampedValue, sliderValue[0]);\n        }\n      }\n\n      const newSliderValues = [...sliderValue];\n      newSliderValues[index] = clampedValue;\n      setSliderValue(newSliderValues);\n\n      const newInputValues = [...inputValues];\n      newInputValues[index] = clampedValue.toString();\n      setInputValues(newInputValues);\n    },\n    [sliderValue, inputValues, minValue, maxValue],\n  );\n\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\n      const newValue = e.target.value;\n      if (newValue === \"\" || /^-?\\d*\\.?\\d*$/.test(newValue)) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = newValue;\n        setInputValues(newInputValues);\n      }\n    },\n    [inputValues],\n  );\n\n  const handleSliderChange = useCallback((newValue: number[]) => {\n    setSliderValue(newValue);\n    setInputValues(newValue.map((v) => v.toString()));\n  }, []);\n\n  const resetToDefault = useCallback(() => {\n    setSliderValue(defaultValue);\n    setInputValues(defaultValue.map((v) => v.toString()));\n  }, [defaultValue]);\n\n  return {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ],
  "tags": []
}