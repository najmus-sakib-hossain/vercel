{
  "name": "comp-463",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/label.json",
    "https://originui.com/r/pagination.json",
    "https://originui.com/r/select.json"
  ],
  "files": [
    {
      "path": "components/comp-463.tsx",
      "content": "import { Label } from \"@/registry/default/ui/label\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationItem,\n  PaginationLink,\n} from \"@/registry/default/ui/pagination\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/default/ui/select\";\nimport { ChevronFirst, ChevronLast, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useId } from \"react\";\n\ntype PaginationProps = {\n  currentPage: number;\n  totalPages: number;\n};\n\nexport default function Component({ currentPage, totalPages }: PaginationProps) {\n  const id = useId();\n  return (\n    <div className=\"flex items-center justify-between gap-8\">\n      {/* Results per page */}\n      <div className=\"flex items-center gap-3\">\n        <Label htmlFor={id}>Rows per page</Label>\n        <Select defaultValue=\"25\">\n          <SelectTrigger id={id} className=\"w-fit whitespace-nowrap\">\n            <SelectValue placeholder=\"Select number of results\" />\n          </SelectTrigger>\n          <SelectContent className=\"[&_*[role=option]>span]:end-2 [&_*[role=option]>span]:start-auto [&_*[role=option]]:pe-8 [&_*[role=option]]:ps-2\">\n            <SelectItem value=\"10\">10</SelectItem>\n            <SelectItem value=\"25\">25</SelectItem>\n            <SelectItem value=\"50\">50</SelectItem>\n            <SelectItem value=\"100\">100</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Page number information */}\n      <div className=\"flex grow justify-end whitespace-nowrap text-sm text-muted-foreground\">\n        <p className=\"whitespace-nowrap text-sm text-muted-foreground\" aria-live=\"polite\">\n          <span className=\"text-foreground\">1-25</span> of{\" \"}\n          <span className=\"text-foreground\">100</span>\n        </p>\n      </div>\n\n      {/* Pagination */}\n      <div>\n        <Pagination>\n          <PaginationContent>\n            {/* First page button */}\n            <PaginationItem>\n              <PaginationLink\n                className=\"aria-disabled:pointer-events-none aria-disabled:opacity-50\"\n                href={currentPage === 1 ? undefined : `#/page/${currentPage - 1}`}\n                aria-label=\"Go to first page\"\n                aria-disabled={currentPage === 1 ? true : undefined}\n                role={currentPage === 1 ? \"link\" : undefined}\n              >\n                <ChevronFirst size={16} strokeWidth={2} aria-hidden=\"true\" />\n              </PaginationLink>\n            </PaginationItem>\n\n            {/* Previous page button */}\n            <PaginationItem>\n              <PaginationLink\n                className=\"aria-disabled:pointer-events-none aria-disabled:opacity-50\"\n                href={currentPage === 1 ? undefined : `#/page/${currentPage - 1}`}\n                aria-label=\"Go to previous page\"\n                aria-disabled={currentPage === 1 ? true : undefined}\n                role={currentPage === 1 ? \"link\" : undefined}\n              >\n                <ChevronLeft size={16} strokeWidth={2} aria-hidden=\"true\" />\n              </PaginationLink>\n            </PaginationItem>\n\n            {/* Next page button */}\n            <PaginationItem>\n              <PaginationLink\n                className=\"aria-disabled:pointer-events-none aria-disabled:opacity-50\"\n                href={currentPage === totalPages ? undefined : `#/page/${currentPage + 1}`}\n                aria-label=\"Go to next page\"\n                aria-disabled={currentPage === totalPages ? true : undefined}\n                role={currentPage === totalPages ? \"link\" : undefined}\n              >\n                <ChevronRight size={16} strokeWidth={2} aria-hidden=\"true\" />\n              </PaginationLink>\n            </PaginationItem>\n\n            {/* Last page button */}\n            <PaginationItem>\n              <PaginationLink\n                className=\"aria-disabled:pointer-events-none aria-disabled:opacity-50\"\n                href={currentPage === totalPages ? undefined : `#/page/${totalPages}`}\n                aria-label=\"Go to last page\"\n                aria-disabled={currentPage === totalPages ? true : undefined}\n                role={currentPage === totalPages ? \"link\" : undefined}\n              >\n                <ChevronLast size={16} strokeWidth={2} aria-hidden=\"true\" />\n              </PaginationLink>\n            </PaginationItem>\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "hooks/use-pagination.ts",
      "content": "type UsePaginationProps = {\n  currentPage: number;\n  totalPages: number;\n  paginationItemsToDisplay: number;\n};\n\ntype UsePaginationReturn = {\n  pages: number[];\n  showLeftEllipsis: boolean;\n  showRightEllipsis: boolean;\n};\n\nexport function usePagination({\n  currentPage,\n  totalPages,\n  paginationItemsToDisplay,\n}: UsePaginationProps): UsePaginationReturn {\n  const showLeftEllipsis = currentPage - 1 > paginationItemsToDisplay / 2;\n  const showRightEllipsis = totalPages - currentPage + 1 > paginationItemsToDisplay / 2;\n\n  function calculatePaginationRange(): number[] {\n    if (totalPages <= paginationItemsToDisplay) {\n      return Array.from({ length: totalPages }, (_, i) => i + 1);\n    }\n\n    const halfDisplay = Math.floor(paginationItemsToDisplay / 2);\n    const initialRange = {\n      start: currentPage - halfDisplay,\n      end: currentPage + halfDisplay,\n    };\n\n    const adjustedRange = {\n      start: Math.max(1, initialRange.start),\n      end: Math.min(totalPages, initialRange.end),\n    };\n\n    if (adjustedRange.start === 1) {\n      adjustedRange.end = paginationItemsToDisplay;\n    }\n    if (adjustedRange.end === totalPages) {\n      adjustedRange.start = totalPages - paginationItemsToDisplay + 1;\n    }\n\n    if (showLeftEllipsis) adjustedRange.start++;\n    if (showRightEllipsis) adjustedRange.end--;\n\n    return Array.from(\n      { length: adjustedRange.end - adjustedRange.start + 1 },\n      (_, i) => adjustedRange.start + i,\n    );\n  }\n\n  const pages = calculatePaginationRange();\n\n  return {\n    pages,\n    showLeftEllipsis,\n    showRightEllipsis,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ],
  "tags": []
}