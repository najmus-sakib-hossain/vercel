{
  "name": "gantts-demo",
  "type": "registry:example",
  "registryDependencies": [
    "gantts"
  ],
  "files": [
    {
      "path": "examples/gantts-demo.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport groupBy from \"lodash.groupby\"\nimport { EyeIcon, LinkIcon, TrashIcon } from \"lucide-react\"\nimport { toast } from \"sonner\"\n\nimport { exampleFeatures, exampleMarkers } from \"@/lib/content\"\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/new-york/ui/avatar\"\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@/registry/new-york/ui/context-menu\"\nimport {\n  GanttCreateMarkerTrigger,\n  GanttFeatureItem,\n  GanttFeatureList,\n  GanttFeatureListGroup,\n  GanttHeader,\n  GanttMarker,\n  GanttProvider,\n  GanttSidebar,\n  GanttSidebarGroup,\n  GanttSidebarItem,\n  GanttTimeline,\n  GanttToday,\n} from \"@/registry/new-york/ui/gantts\"\n\nexport default function GanttsDemo() {\n  const [features, setFeatures] = useState(exampleFeatures)\n\n  const groupedFeatures: Record<string, typeof features> = groupBy(\n    features,\n    \"group.name\"\n  )\n\n  const sortedGroupedFeatures = Object.fromEntries(\n    Object.entries(groupedFeatures).sort(([nameA], [nameB]) =>\n      nameA.localeCompare(nameB)\n    )\n  )\n\n  const handleViewFeature = (id: string) =>\n    toast.success(`Feature selected: ${id}`)\n\n  const handleCopyLink = (id: string) => toast.success(`Copy link: ${id}`)\n\n  const handleRemoveFeature = (id: string) =>\n    setFeatures((prev) => prev.filter((feature) => feature.id !== id))\n\n  const handleRemoveMarker = (id: string) =>\n    toast.success(`Remove marker: ${id}`)\n\n  const handleCreateMarker = (date: Date) =>\n    toast.success(`Create marker: ${date.toISOString()}`)\n\n  const handleMoveFeature = (id: string, startAt: Date, endAt: Date | null) => {\n    if (!endAt) {\n      return\n    }\n\n    setFeatures((prev) =>\n      prev.map((feature) =>\n        feature.id === id ? { ...feature, startAt, endAt } : feature\n      )\n    )\n\n    toast.success(`Move feature: ${id} from ${startAt} to ${endAt}`)\n  }\n\n  const handleAddFeature = (date: Date) =>\n    toast.success(`Add feature: ${date.toISOString()}`)\n\n  return (\n    <GanttProvider onAddItem={handleAddFeature} range=\"monthly\" zoom={100}>\n      <GanttSidebar>\n        {Object.entries(sortedGroupedFeatures).map(([group, features]) => (\n          <GanttSidebarGroup key={group} name={group}>\n            {features.map((feature) => (\n              <GanttSidebarItem\n                key={feature.id}\n                feature={feature}\n                onSelectItem={handleViewFeature}\n              />\n            ))}\n          </GanttSidebarGroup>\n        ))}\n      </GanttSidebar>\n      <GanttTimeline>\n        <GanttHeader />\n        <GanttFeatureList>\n          {Object.entries(sortedGroupedFeatures).map(([group, features]) => (\n            <GanttFeatureListGroup key={group}>\n              {features.map((feature) => (\n                <div className=\"flex\" key={feature.id}>\n                  <ContextMenu>\n                    <ContextMenuTrigger asChild>\n                      <button\n                        type=\"button\"\n                        onClick={() => handleViewFeature(feature.id)}\n                      >\n                        <GanttFeatureItem\n                          onMove={handleMoveFeature}\n                          {...feature}\n                        >\n                          <p className=\"flex-1 truncate text-xs\">\n                            {feature.name}\n                          </p>\n                          {feature.owner && (\n                            <Avatar className=\"h-4 w-4\">\n                              <AvatarImage src={feature.owner.image} />\n                              <AvatarFallback>\n                                {feature.owner.name?.slice(0, 2)}\n                              </AvatarFallback>\n                            </Avatar>\n                          )}\n                        </GanttFeatureItem>\n                      </button>\n                    </ContextMenuTrigger>\n                    <ContextMenuContent>\n                      <ContextMenuItem\n                        className=\"flex items-center gap-2\"\n                        onClick={() => handleViewFeature(feature.id)}\n                      >\n                        <EyeIcon size={16} className=\"text-muted-foreground\" />\n                        View feature\n                      </ContextMenuItem>\n                      <ContextMenuItem\n                        className=\"flex items-center gap-2\"\n                        onClick={() => handleCopyLink(feature.id)}\n                      >\n                        <LinkIcon size={16} className=\"text-muted-foreground\" />\n                        Copy link\n                      </ContextMenuItem>\n                      <ContextMenuItem\n                        className=\"flex items-center gap-2 text-destructive\"\n                        onClick={() => handleRemoveFeature(feature.id)}\n                      >\n                        <TrashIcon size={16} />\n                        Remove from roadmap\n                      </ContextMenuItem>\n                    </ContextMenuContent>\n                  </ContextMenu>\n                </div>\n              ))}\n            </GanttFeatureListGroup>\n          ))}\n        </GanttFeatureList>\n        {exampleMarkers.map((marker) => (\n          <GanttMarker\n            key={marker.id}\n            {...marker}\n            onRemove={handleRemoveMarker}\n          />\n        ))}\n        <GanttToday />\n        <GanttCreateMarkerTrigger onCreateMarker={handleCreateMarker} />\n      </GanttTimeline>\n    </GanttProvider>\n  )\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}