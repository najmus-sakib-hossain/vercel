{
  "name": "comp-264",
  "type": "registry:component",
  "registryDependencies": [
    "https://originui.com/r/label.json",
    "https://originui.com/r/slider.json",
    "https://originui.com/r/input.json",
    "https://originui.com/r/button.json"
  ],
  "files": [
    {
      "path": "components/comp-264.tsx",
      "content": "\"use client\";\n\nimport { useSliderWithInput } from \"@/registry/default/hooks/use-slider-with-input\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport { Input } from \"@/registry/default/ui/input\";\nimport { Label } from \"@/registry/default/ui/label\";\nimport { Slider } from \"@/registry/default/ui/slider\";\nimport { RotateCcw } from \"lucide-react\";\nimport React, { useRef } from \"react\";\n\nexport default function Component() {\n  // Create refs to store reset functions\n  const resetFunctionsRef = useRef<(() => void)[]>([]);\n\n  // Function to reset all sliders to default\n  const resetAll = () => {\n    resetFunctionsRef.current.forEach((resetFn) => resetFn());\n  };\n\n  // Function to register reset functions\n  const registerResetFunction = (resetFn: () => void, index: number) => {\n    resetFunctionsRef.current[index] = resetFn;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <legend className=\"text-sm font-medium text-foreground\">Object position</legend>\n      <div className=\"space-y-2\">\n        <SliderWithInput\n          minValue={-10}\n          maxValue={10}\n          initialValue={[-2]}\n          defaultValue={[0]}\n          label=\"X\"\n          onRegisterReset={(resetFn) => registerResetFunction(resetFn, 0)}\n        />\n        <SliderWithInput\n          minValue={-10}\n          maxValue={10}\n          initialValue={[4]}\n          defaultValue={[0]}\n          label=\"Y\"\n          onRegisterReset={(resetFn) => registerResetFunction(resetFn, 1)}\n        />\n        <SliderWithInput\n          minValue={-10}\n          maxValue={10}\n          initialValue={[2]}\n          defaultValue={[0]}\n          label=\"Z\"\n          onRegisterReset={(resetFn) => registerResetFunction(resetFn, 2)}\n        />\n      </div>\n      <Button className=\"w-full\" variant=\"outline\" onClick={resetAll}>\n        <RotateCcw className=\"-ms-1 me-2 opacity-60\" size={16} strokeWidth={2} aria-hidden=\"true\" />\n        Reset\n      </Button>\n    </div>\n  );\n}\n\nfunction SliderWithInput({\n  minValue,\n  maxValue,\n  initialValue,\n  defaultValue,\n  label,\n  onRegisterReset,\n}: {\n  minValue: number;\n  maxValue: number;\n  initialValue: number[];\n  defaultValue: number[];\n  label: string;\n  onRegisterReset: (resetFn: () => void) => void;\n}) {\n  const {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n  } = useSliderWithInput({ minValue, maxValue, initialValue, defaultValue });\n\n  // Register the reset function when the component mounts\n  React.useEffect(() => {\n    onRegisterReset(resetToDefault);\n  }, [onRegisterReset, resetToDefault]);\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Label className=\"text-xs text-muted-foreground\">{label}</Label>\n      <Slider\n        className=\"grow [&>:last-child>span]:rounded\"\n        value={sliderValue}\n        onValueChange={handleSliderChange}\n        min={minValue}\n        max={maxValue}\n        aria-label={label}\n      />\n      <Input\n        className=\"h-8 w-12 px-2 py-1\"\n        type=\"text\"\n        inputMode=\"decimal\"\n        value={inputValues[0]}\n        onChange={(e) => handleInputChange(e, 0)}\n        onBlur={() => validateAndUpdateValue(inputValues[0], 0)}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            validateAndUpdateValue(inputValues[0], 0);\n          }\n        }}\n        aria-label=\"Enter value\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "hooks/use-slider-with-input.ts",
      "content": "import { useCallback, useState } from \"react\";\n\ntype UseSliderWithInputProps = {\n  minValue?: number;\n  maxValue?: number;\n  initialValue?: number[];\n  defaultValue?: number[];\n};\n\nexport function useSliderWithInput({\n  minValue = 0,\n  maxValue = 100,\n  initialValue = [minValue],\n  defaultValue = [minValue],\n}: UseSliderWithInputProps) {\n  const [sliderValue, setSliderValue] = useState(initialValue);\n  const [inputValues, setInputValues] = useState(initialValue.map((v) => v.toString()));\n\n  const validateAndUpdateValue = useCallback(\n    (rawValue: string, index: number) => {\n      if (rawValue === \"\" || rawValue === \"-\") {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = \"0\";\n        setInputValues(newInputValues);\n\n        const newSliderValues = [...sliderValue];\n        newSliderValues[index] = 0;\n        setSliderValue(newSliderValues);\n        return;\n      }\n\n      const numValue = parseFloat(rawValue);\n\n      if (isNaN(numValue)) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = sliderValue[index].toString();\n        setInputValues(newInputValues);\n        return;\n      }\n\n      let clampedValue = Math.min(maxValue, Math.max(minValue, numValue));\n\n      if (sliderValue.length > 1) {\n        if (index === 0) {\n          clampedValue = Math.min(clampedValue, sliderValue[1]);\n        } else {\n          clampedValue = Math.max(clampedValue, sliderValue[0]);\n        }\n      }\n\n      const newSliderValues = [...sliderValue];\n      newSliderValues[index] = clampedValue;\n      setSliderValue(newSliderValues);\n\n      const newInputValues = [...inputValues];\n      newInputValues[index] = clampedValue.toString();\n      setInputValues(newInputValues);\n    },\n    [sliderValue, inputValues, minValue, maxValue],\n  );\n\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>, index: number) => {\n      const newValue = e.target.value;\n      if (newValue === \"\" || /^-?\\d*\\.?\\d*$/.test(newValue)) {\n        const newInputValues = [...inputValues];\n        newInputValues[index] = newValue;\n        setInputValues(newInputValues);\n      }\n    },\n    [inputValues],\n  );\n\n  const handleSliderChange = useCallback((newValue: number[]) => {\n    setSliderValue(newValue);\n    setInputValues(newValue.map((v) => v.toString()));\n  }, []);\n\n  const resetToDefault = useCallback(() => {\n    setSliderValue(defaultValue);\n    setInputValues(defaultValue.map((v) => v.toString()));\n  }, [defaultValue]);\n\n  return {\n    sliderValue,\n    inputValues,\n    validateAndUpdateValue,\n    handleInputChange,\n    handleSliderChange,\n    resetToDefault,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ],
  "tags": []
}