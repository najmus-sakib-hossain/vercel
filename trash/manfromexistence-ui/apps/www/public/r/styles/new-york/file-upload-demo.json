{
  "name": "file-upload-demo",
  "type": "registry:example",
  "registryDependencies": [
    "button",
    "form",
    "file-upload-demo"
  ],
  "files": [
    {
      "path": "examples/file-upload-demo.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { CloudUpload, Paperclip } from \"lucide-react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"sonner\"\nimport * as z from \"zod\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport {\n  FileInput,\n  FileUploader,\n  FileUploaderContent,\n  FileUploaderItem,\n} from \"@/registry/new-york/ui/file-upload\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/registry/new-york/ui/form\"\n\nconst formSchema = z.object({\n  name_4408448766: z.string(),\n})\n\nexport default function MyForm() {\n  const [files, setFiles] = useState<File[] | null>(null)\n\n  const dropZoneConfig = {\n    maxFiles: 5,\n    maxSize: 1024 * 1024 * 4,\n    multiple: true,\n  }\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n  })\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    try {\n      console.log(values)\n      toast(\n        <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(values, null, 2)}</code>\n        </pre>\n      )\n    } catch (error) {\n      console.error(\"Form submission error\", error)\n      toast.error(\"Failed to submit the form. Please try again.\")\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        className=\"mx-auto max-w-3xl space-y-8 py-10\"\n      >\n        <FormField\n          control={form.control}\n          name=\"name_4408448766\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Select File</FormLabel>\n              <FormControl>\n                <FileUploader\n                  value={files}\n                  onValueChange={setFiles}\n                  dropzoneOptions={dropZoneConfig}\n                  className=\"relative rounded-lg bg-background p-2\"\n                >\n                  <FileInput\n                    id=\"fileInput\"\n                    className=\"outline-dashed outline-1 outline-slate-500\"\n                  >\n                    <div className=\"flex w-full flex-col items-center justify-center p-8 \">\n                      <CloudUpload className=\"h-10 w-10 text-gray-500\" />\n                      <p className=\"mb-1 text-sm text-gray-500 dark:text-gray-400\">\n                        <span className=\"font-semibold\">Click to upload</span>\n                        &nbsp; or drag and drop\n                      </p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        SVG, PNG, JPG or GIF\n                      </p>\n                    </div>\n                  </FileInput>\n                  <FileUploaderContent>\n                    {files &&\n                      files.length > 0 &&\n                      files.map((file, i) => (\n                        <FileUploaderItem key={i} index={i}>\n                          <Paperclip className=\"h-4 w-4 stroke-current\" />\n                          <span>{file.name}</span>\n                        </FileUploaderItem>\n                      ))}\n                  </FileUploaderContent>\n                </FileUploader>\n              </FormControl>\n              <FormDescription>Select a file to upload.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}